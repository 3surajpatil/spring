Spring MVC
-----------

In Spring Web MVC, DispatcherServlet class works as the front controller. It is responsible to manage the flow of the spring mvc application. 

The @Controller annotation is used to mark the class as the controller in Spring 3. 

The @RequestMapping annotation is used to map the request url. It is applied on the method. 


---> all the incoming request is intercepted by the DispatcherServlet that works as the front controller. 
The DispatcherServlet gets entry of handler mapping from the xml file and forwards the request to the controller. 
The controller returns an object of ModelAndView. 
The DispatcherServlet checks the entry of view resolver in the xml file and invokes the specified view component. 

--->steps for simple mvc app are as follows.


1.Create the request page (optional)
2.Create the controller class
3.Provide the entry of controller in the web.xml file
4.Define the bean in the xml file
5.Display the message in the JSP page
6.Load the spring core and mvc jar files
7.Start server and deploy the project



1--> request would be hello.html

HelloWorldController
----------------------------
package com.javatpoint;  
import org.springframework.stereotype.Controller;  
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.servlet.ModelAndView;  
@Controller  
public class HelloWorldController {  
    @RequestMapping("/hello")  //here helloWorld() is mapped to /hello url
    public ModelAndView helloWorld() {  
        String message = "HELLO SPRING MVC HOW R U";  
        
		/*
			here we are returning the ModelAndView object in which 
			first arg is suffix name of the view page which we are going to display.
			second argument is the object/poroperty name of the view page where 3rd object argument is to be assigned.
			here message string will be assigned to ${message} of jsp page.
		*/
		return new ModelAndView("hellopage", "message", message);  
		
    }  
}  

--> we can write as many controller classes as we want.
at time of server startup spring registers each mapped url with controller. so that those will be available on the request.


web.xml
----------
we need to configure DispatcherServlet class in the web.xml

<web-app version="2.5">  
<servlet>  
   <servlet-name>spring</servlet-name>  
   <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
    <load-on-startup>1</load-on-startup>  
</servlet>  
<servlet-mapping>  
    <servlet-name>spring</servlet-name>  
    <url-pattern>*.html</url-pattern>  
</servlet-mapping>  
</web-app>  


spring-servlet.xml 
------------------

we need to define view resolver class so that Dispatcher servlet will be able to find the appropriate view page
for the provided ModelAndView class by Controller class.
---> note that we need to have same name in the XXX part of this file name as that we have configured in servlet-name part of web.xml

XXX-servlet.xml 



<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xmlns:p="http://www.springframework.org/schema/p"  xmlns:context="http://www.springframework.org/schema/context"  xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd">      <context:component-scan  base-package="com.javatpoint" />  

	<context:component-scan base-package="com.javatpoint"></context:component-scan>  


    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/WEB-INF/jsp/" />  
        <property name="suffix" value=".jsp" />  
	</bean>  
</beans> 

hellopage.jsp
---------------
Message is: ${message}  



Example of spring form
-----------------------


@Controller  
public class EmpController {  
  
    @RequestMapping("/empform")  
    public ModelAndView showform(){  
         //command is a reserved request attribute name, now use <form> tag to show object data  
        return new ModelAndView("empform","command",new Emp());  
    }
	
    @RequestMapping(value="/save",method = RequestMethod.POST)  
    public ModelAndView save(@ModelAttribute("emp") Emp emp){  
        //write code to save emp object  
        //here, we are displaying emp object to prove emp has data  
        System.out.println(emp.getName()+" "+emp.getSalary()+" "+emp.getDesignation());  
          
        //return new ModelAndView("empform","command",emp);//will display object data  
        return new ModelAndView("redirect:/viewemp");//will redirect to viewemp request mapping  
    }  
}


empform.jsp
--------------

<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>    
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>    
  
       <form:form method="post" action="save">    
        <table >    
         <tr>    
          <td>Name : </td>   
          <td><form:input path="name"  /></td>  
         </tr>    
         <tr>    
          <td>Salary :</td>    
          <td><form:input path="salary" /></td>  
         </tr>   
         <tr>    
          <td>Designation :</td>    
          <td><form:input path="designation" /></td>  
         </tr>   
         <tr>    
          <td colspan="2"><input type="submit" value="Save" /></td>    
         </tr>    
        </table>    
       </form:form>    


viewemp.jsp
------------
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>    
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>     
<table border="2" width="70%" cellpadding="2">  
<tr><th>Id</th><th>Name</th><th>Salary</th><th>Designation</th></tr>  
   <c:forEach var="emp" items="${list}">   
   <tr>  
   <td>${emp.id}</td>  
   <td>${emp.name}</td>  
   <td>${emp.salary}</td>  
   <td>${emp.designation}</td>  
   </tr>  
   </c:forEach>  
</table>  



Spring MVC File Upload example.
===============================


1)Add commons-io and fileupload.jar files

2) create a upload form

<form action="savefile" method="post" enctype="multipart/form-data">  
Select File: <input type="file" name="file"/>  
			 <input type="submit" value="Upload File"/>  
</form>  



3) we need to Use CommonsMultipartFile class in Controller

@RequestMapping(value="/savefile",method=RequestMethod.POST)  
public ModelAndView upload(@RequestParam CommonsMultipartFile file,HttpSession session){  
        String path=session.getServletContext().getRealPath("/");  
        String filename=file.getOriginalFilename();  
          
        System.out.println(path+" "+filename);  
        try{  
        byte barr[]=file.getBytes();  
          
        BufferedOutputStream bout=new BufferedOutputStream(  
                 new FileOutputStream(path+"/"+filename));  
        bout.write(barr);  
        bout.flush();  
        bout.close();  
          
        }catch(Exception e){System.out.println(e);}  
        return new ModelAndView("upload-success","filename",path+"/"+filename);  
}  



4) also initialize the bean for CommonsMultipartResolver. in XXX-servlet.xml file.


<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>  



Spring MVC + apache tiles
---------------------------

Spring provides integration support with apache tiles framework. So we can simply manage the layout of 
the spring mvc application by the help of spring tiles support.


web.xml will be same old. it would only contain the DispatcherServlet configuration.

web.xml
--------
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>springmvctiles</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>  
  </welcome-file-list>
  
  <servlet>
  <servlet-name>spring</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>spring</servlet-name>
  	<url-pattern>*.do</url-pattern>
  </servlet-mapping>  
</web-app>
  

request will go to Controller.

ContactController.java
----------------------
package org.harman.springmvctiles.controller;

import org.harman.springmvctiles.model.Contact;
import org.harman.springmvctiles.service.ContactService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class ContactController {

	ContactService contactService=new ContactService();
	
	@RequestMapping("/contactForm")
	public ModelAndView getContactForm()
	{
		//the AddContact url will be looked in the tiles.xml to resolve it's view.					
		return new ModelAndView("AddContact","command",new Contact());		
	}
	
	@RequestMapping(value="/addContact", method=RequestMethod.POST)
	public ModelAndView addContact(@ModelAttribute("contact") Contact contact)
	{
		
		System.out.println("name:- "+contact.getName()+" city:-"+contact.getCity());
		//the showcontact url will be looked in tiles.xml to resolve its view.
		return new ModelAndView("showcontact","contact",contact);
	}
	
}

---> spring looks for the view resolver in the xxx-servlet file..

XXX-servlet.xml
----------------


<beans xmlns="http://www.springframework.org/schema/beans"      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      xmlns:p="http://www.springframework.org/schema/p"      xmlns:context="http://www.springframework.org/schema/context"      xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd"> 
  
    <context:component-scan  base-package="org.harman.springmvctiles" />  
    <!-- 
	this is commented for spring mvc exmple.
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">      
        <property name="prefix" value="/WEB-INF/jsp/" />  
        <property name="suffix" value=".jsp" />  
    </bean> -->
    
    <bean id="viewResolver"  class="org.springframework.web.servlet.view.UrlBasedViewResolver">  
        <property name="viewClass">  
            <value>  
                org.springframework.web.servlet.view.tiles2.TilesView  
            </value>  
        </property>  
    </bean>  
    <bean id="tilesConfigurer"  class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">  
        <property name="definitions">  
            <list>  
                <value>/WEB-INF/tiles.xml</value>  
            </list>  
        </property>  
    </bean>  
      
</beans>  

UrlBasedViewResolver 's TilesView class will try to resolve view based on the pages configured using tiles.xml..

tiles.xml 
----------

---> note here base.definition is extended by all other definitions. using extends="base.definition"
---> in definition name="XXX", here XXX is view resolver string that we pass in new ModelAndView("XXX","obj_name_to_assign",obj_value_toassign)
---> here all other files should be created and placed at their position e.g. header.jsp,menu.jsp, footer.jsp

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 2.0//EN" 
 "http://tiles.apache.org/dtds/tiles-config_2_0.dtd">  
<tiles-definitions>  
    <definition name="base.definition"  
        template="/WEB-INF/jsp/commanpages/layout.jsp">  
        <put-attribute name="title" value="" />  
        <put-attribute name="header" value="/WEB-INF/jsp/commanpages/header.jsp" />  
        <put-attribute name="menu" value="/WEB-INF/jsp/commanpages/menu.jsp" />  
       <put-attribute name="body" value="" />  
        <put-attribute name="footer" value="/WEB-INF/jsp/commanpages/footer.jsp" />  
	</definition>  
  
    <definition name="showcontact" extends="base.definition">  
        <put-attribute name="title" value="Contact Manager" />  
	    <put-attribute name="body" value="/WEB-INF/jsp/showcontact.jsp" />  
    </definition>  
  
    <definition name="AddContact" extends="base.definition">  
        <put-attribute name="title" value="Hello Spring MVC" />  
        <put-attribute name="body" value="/WEB-INF/jsp/AddContact.jsp" />  
    </definition>  
  
</tiles-definitions>  



showcontact.jsp
----------------
<body>
contact name:= ${contact.getName()}
</body>


AddContact.jsp
----------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>  
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<form:form method="post" action="addContact.do">
<table align="center" border="1">
	<tr>
		<td><form:label path="name"/>name</td>
		<td><form:input path="name"/></td>
	</tr>	
	<tr>
		<td><form:label path="street"/>street</td>
		<td><form:input path="street"/></td>
	</tr>	
	<tr>
		<td><form:label path="city"/>city</td>
		<td><form:input path="city"/></td>
	</tr>	
	<tr>
		<td><form:label path="state"/>state</td>
		<td><form:input path="state"/></td>
	</tr>
	<tr>
	<td colspan="2"><input type="submit" value="Add Contact"/>  </td>
	</tr>
</table>
</form:form>
</body>
</html>

pom.xml
--------

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.harman.spring.mvc</groupId>
  <artifactId>tiles</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>spring tiles</name>
  <description>spring tiles example</description>
  <build>
    <sourceDirectory>src</sourceDirectory>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <warSourceDirectory>WebContent</warSourceDirectory>
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>
    </plugins>
  </build>
  
  <dependencies>
  <dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-core</artifactId>  
	    <version>3.1.2.RELEASE</version>  
	</dependency>  
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-context</artifactId>  
	    <version>3.1.2.RELEASE</version>  
	</dependency>  
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-beans</artifactId>  
	    <version>3.1.2.RELEASE</version>  
	</dependency>  
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-webmvc</artifactId>  
	    <version>3.1.2.RELEASE</version>  
	</dependency>    
	
	<dependency>
	    <groupId>jstl</groupId>
	    <artifactId>jstl</artifactId>
	    <version>1.2</version>
	</dependency>
	
	<dependency>
    <groupId>org.apache.tiles</groupId>
    <artifactId>tiles-jsp</artifactId>
    <version>2.2.1</version>
	</dependency>
	
	<dependency>
    <groupId>org.apache.tiles</groupId>
    <artifactId>tiles-core</artifactId>
    <version>2.2.1</version>
	</dependency>
  
  	<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.6.1</version>
	</dependency>
  
  </dependencies>
  
</project>



Getting HttpSession in SpringMVC.
----------------------------------


we can access the session id in Spring MVC application in a same way as in Java EE application. 
we just need to pass HttpSession object in arguments of a RequestHandler method and then invoke appropriate method for 
the session object

@RequestMapping(value="/", method=RequestMethod.GET)
    public ModelAndView mainPage(HttpSession session) {
        ModelAndView mav = new ModelAndView("home");
        String sid = session.getId();
        session.setAttribute("success" , "successfully accessed");
		mav.addObject("sid", sid);
		
        return mav; 
}

Access the session variable in jsp using EL like this : 

<%@ page isELIgnored="false"%>
<c:if test="${not empty success}">
   <div id="success" class="success">
    <c:out value="${success}"></c:out>
   </div>
</c:if>

---> alternate approach to get session would be getting HttpServletRequest req in request handler method

@RequestMapping(value = "/test", method = RequestMethod.POST)
 @ResponseBody
 public JsonResponse getSessionIncontroller
         (@RequestBody String jsonReqString ,HttpServletRequest request) 
{
  Session session = request.getSession();
  session.setAttribute("success" , "successfully accessed");
  return jsonResponse;
 }


---> content negotiation.












