Spring Form Validation   with tiles.
=========================

JSR303 Bean Validation is the specification of the Java API for JavaBean validation in Java EE and Java SE. 
Simply put it provides an easy way of ensuring that the properties of your JavaBean(s) have the right values in them.

-> to validate we would need implementation for jSR303. one validation we have is Hibernate Validator.
->We can create our custom validator implementations by two ways 
1)first one is to create an annotation that confirms to the JSR-303 specs and implement itâ€™s Validator class. 
2)Second approach is to implement the org.springframework.validation.Validator interface and add set it as validator
  in the Controller class using @InitBinder annotation.
  
below is example of first approach.
  
pom.xml
-------


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.harman.spring.mvc</groupId>
  <artifactId>tiles</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>spring tiles</name>
  <description>spring tiles example</description>
  <build>
    <sourceDirectory>src</sourceDirectory>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <warSourceDirectory>WebContent</warSourceDirectory>
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>
    </plugins>
  </build>

<properties>
	<spring.version>4.2.9.RELEASE</spring.version>
</properties>
  
  <dependencies>
  <dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-core</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>  
	 <dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-context</artifactId>  
	    <version>${spring.version}</version>  
	</dependency> 
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-beans</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>  
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-webmvc</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>    
	
	<dependency>
	    <groupId>jstl</groupId>
	    <artifactId>jstl</artifactId>
	    <version>1.2</version>
	</dependency>
	
	<dependency>
    <groupId>org.apache.tiles</groupId>
    <artifactId>tiles-jsp</artifactId>
    <version>2.2.1</version>
	</dependency>
	
	<dependency>
    <groupId>org.apache.tiles</groupId>
    <artifactId>tiles-core</artifactId>
    <version>2.2.1</version>
	</dependency>
  
  	<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.6.1</version>
	</dependency>
  
  	<dependency>
		<groupId>javax.validation</groupId>
		<artifactId>validation-api</artifactId>
		<version>1.1.0.Final</version>
	</dependency>
	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-validator</artifactId>
		<version>5.2.4.Final</version>
	</dependency>
  
  </dependencies>
  
</project>
		
web.xml  (note that we have specified init parameter of spring config file.)
-------  
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>springmvctiles</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>  
  </welcome-file-list>
  
  <servlet>
  <servlet-name>spring</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
   <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/spring-servlet.xml</param-value>
    </init-param>
 <load-on-startup>1</load-on-startup>  
  </servlet>
  <servlet-mapping>
  	<servlet-name>spring</servlet-name>
  	<url-pattern>*.do</url-pattern>
  </servlet-mapping> 
</web-app>

XXX-servlet.xml
---------------
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
  
	http://www.springframework.org/schema/context  
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">

  
    <context:component-scan  base-package="org.harman.springmvctiles" />  
    <mvc:annotation-driven/>
    
<!--     <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">      
        <property name="prefix" value="/WEB-INF/jsp/" />  
        <property name="suffix" value=".jsp" />  
    </bean> 
  -->   
      <bean id="viewResolver"  class="org.springframework.web.servlet.view.UrlBasedViewResolver">  
        <property name="viewClass">  
            <value>  
                org.springframework.web.servlet.view.tiles2.TilesView  
            </value>  
        </property>  
    </bean>  
    <bean id="tilesConfigurer"  class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">  
        <property name="definitions">  
            <list>  
                <value>/WEB-INF/tiles.xml</value>  
            </list>  
        </property>  
    </bean> 
      
</beans>  


tiles.xml
----------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 2.0//EN"  "http://tiles.apache.org/dtds/tiles-config_2_0.dtd">  
<tiles-definitions>  
    <definition name="base.definition"  
        template="/WEB-INF/jsp/commanpages/layout.jsp">  
        <put-attribute name="title" value="" />  
        <put-attribute name="header" value="/WEB-INF/jsp/commanpages/header.jsp" />  
        <put-attribute name="menu" value="/WEB-INF/jsp/commanpages/menu.jsp" />  
       <put-attribute name="body" value="" />  
        <put-attribute name="footer" value="/WEB-INF/jsp/commanpages/footer.jsp" />  
	</definition>  
  
    <definition name="showcontact" extends="base.definition">  
        <put-attribute name="title" value="Contact Manager" />  
	    <put-attribute name="body" value="/WEB-INF/jsp/showcontact.jsp" />  
    </definition>  
  
    <definition name="contactForm" extends="base.definition">  
        <put-attribute name="title" value="Hello Spring MVC" />  
        <put-attribute name="body" value="/WEB-INF/jsp/contactForm.jsp" />  
    </definition>  
 
  
</tiles-definitions>  	
	
	
	
--->Controller class will look like below .
package org.harman.springmvctiles.controller;

import java.util.Map;

import javax.validation.Valid;

import org.harman.springmvctiles.model.Contact;
import org.harman.springmvctiles.service.ContactService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class ContactController {

	ContactService contactService=new ContactService();
	
	@RequestMapping("/contactForm")
	public String getContactForm(ModelMap model)
	{
		/*
		 * in below line we are adding attribute contact. same is required in the jsp form as 
		 * modelAttribute="contact". here spring binds the form with attribute contact.		
		 */
		model.addAttribute("contact",new Contact());
		return "contactForm";		
	}
	

	//note here @Valid should follow BindingResult parameter.
	@RequestMapping(value="/addContact", method=RequestMethod.POST)
	public String addContact(@Valid @ModelAttribute("contact") Contact contact,
			BindingResult bindingResult,
			ModelMap modelMap			
			)	
	{								
		if(bindingResult.hasErrors())
		{
			/* we can add as many attributes as we want here.
			attributes are the objects that we want to access on our gui/view page.
			these are same to request.setAttribute or request.getAttribute in plain old servlet technology.
			*/											
			modelMap.addAttribute("command",bindingResult.getModel());	
			
			return "contactForm";
		}
		else
		{							
			modelMap.addAttribute("testAttribute", "testAttributeValue");									
			/*modelMap.addAttribute("contact",contact); no need to add explicityly. model object is bydefault 
			accessible in the jsp.
			the showcontact url will be looked in tiles.xml to resolve its view.  */
			
			return "showcontact";
		}
	}
	
}


----> in model Class we need to put required annotations above gettter methods or the member declaration.
	  as below for validation.

	@NotEmpty(message = "Please enter your name.")
	public String getName() {
		return name;
	}

	or above the member declaration.
	
	@NotEmpty(message="please enter your name")
	String name;
	
	
e.g. 
package com.websystique.springmvc.model;
 
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
 
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
 
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.format.annotation.DateTimeFormat;
 
public class Student implements Serializable {
 
    @Size(min=3, max=30)
    private String firstName;
 
    @Size(min=3, max=30)
    private String lastName;
 
    @NotEmpty
    private String sex;
 
    @DateTimeFormat(pattern="dd/MM/yyyy")
    @Past @NotNull
    private Date dob;
 
    @Email @NotEmpty
    private String email;
 
    @NotEmpty
    private String section;
 
    @NotEmpty
    private String country;
 
    private boolean firstAttempt;
 
    @NotEmpty
    private List<String> subjects = new ArrayList<String>();
 
    public String getFirstName() {
        return firstName;
    }
 
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
 //other getters and setters.
 
    @Override
    public String toString() {
        return "Student [firstName=" + firstName + ", lastName=" + lastName
                + ", sex=" + sex + ", dob=" + dob + ", email=" + email
                + ", section=" + section + ", country=" + country
                + ", firstAttempt=" + firstAttempt + ", subjects=" + subjects
                + "]";
    }
 
}

	
	
contactForm.jsp
----------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>  
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>


<form:form method="post" modelAttribute="contact" action="addContact.do">
<table align="center" border="1">

	<tr>
		<td><form:label path="name"/>name</td>
		<td><form:input path="name"/></td>
		<td><form:errors path="name"/></td>			
	</tr>
	
	<tr>
		<td><form:label path="street"/>street</td>
		<td><form:input path="street"/></td>
		<td><form:errors path="street"/></td>		
	</tr>
		
	<tr>
	<td colspan="2"><input type="submit" value="Add Contact"/>  </td>
	</tr>

</table>
</form:form>
</body>
</html>	
	
	
	
showcontact.jsp page
---------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
<%@taglib uri="http://www.springframework.org/tags" prefix="s"%>
<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
	<title>Insert title here</title>
</head>
<body>
contact name:= ${contact.name}
<br>
value of attribute is := ${testAttribute}
</body>
</html>	
	